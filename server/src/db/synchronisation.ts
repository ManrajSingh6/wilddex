import { dbClient } from "../index";
import { upvotesTable, postsTable, usersTable } from "./schema";

export async function syncAllData(
  src: typeof dbClient,
  target: typeof dbClient
): Promise<undefined> {
  // Create the "users" table
  // Create the "users" table
  await target.execute(`
  CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name VARCHAR NOT NULL,
    email VARCHAR NOT NULL UNIQUE,
    password VARCHAR NOT NULL
  );
`);

  // Create the "posts" table
  await target.execute(`
  CREATE TABLE IF NOT EXISTS posts (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    animal VARCHAR(255) NOT NULL,
    notes VARCHAR,
    conservation_notes TEXT NOT NULL,
    image_url VARCHAR NOT NULL,
    latitude DOUBLE PRECISION NOT NULL,
    longitude DOUBLE PRECISION NOT NULL,
    created_at TIMESTAMPTZ DEFAULT now() NOT NULL
  );
`);

  // Create the "upvotes" table
  await target.execute(`
  CREATE TABLE IF NOT EXISTS upvotes (
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    post_id INTEGER NOT NULL REFERENCES posts(id) ON DELETE CASCADE,
    user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE
  );
`);

  await target.execute(`
    TRUNCATE TABLE upvotes, posts, users RESTART IDENTITY CASCADE;
  `);

  let schema = [usersTable, postsTable, upvotesTable];

  try {
    console.log("Starting full sync...\n");

    for (const [tableName, table] of Object.entries(schema)) {
      console.log(`Fetching data from src: ${tableName}`);
      const data = await src.select().from(table);

      console.log(`Inserting into target: ${tableName}`);
      if (data.length > 0) {
        await target.insert(table).values(data);
      }
      console.log(`Synced table: ${tableName}\n`);
    }

    console.log("Database sync complete.");
  } catch (error) {
    console.error("Error during DB synchronization:", error);
  }
}
