name: WildDex

services:
  db-primary:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    env_file:
      - "./server/.env"
    volumes:
      - pgdata-primary:/var/lib/postgresql/data
    networks:
      - wilddex-network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: wilddex
      POSTGRES_DB: wilddex-primary-db

  db-replica:
    image: postgres
    restart: always
    ports:
      - "5433:5433"
    env_file:
      - "./server/.env"
    volumes:
      - pgdata-replica:/var/lib/postgresql/data
      - ./server/postgresql-5433.conf:/etc/postgresql/postgresql.conf
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    networks:
      - wilddex-network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: wilddex
      POSTGRES_DB: wilddex-replica-db

  db-replica2:
    image: postgres
    restart: always
    ports:
      - "5434:5434"
    env_file:
      - "./server/.env"
    volumes:
      - pgdata-replica:/var/lib/postgresql/data
      - ./server/postgresql-5434.conf:/etc/postgresql/postgresql.conf
    command:
      - "postgres"
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
    networks:
      - wilddex-network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: wilddex2
      POSTGRES_DB: wilddex-replica2-db

  redis-cache:
    image: redis
    restart: always
    ports:
      - "6379:6379"
    env_file:
      - "./server/.env"
    volumes:
      - redis-cache:/data
    networks:
      - wilddex-network

  api-1:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: wilddex-api
    restart: always
    ports:
      - "4000:4000"
    env_file:
      - "./server/.env"
    networks:
      - wilddex-network
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - db-primary
      - redis-cache
    environment:
      - PORT=4000

  api-2:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: wilddex-api
    restart: always
    ports:
      - "4001:4001"
    env_file:
      - "./server/.env"
    networks:
      - wilddex-network
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - db-primary
      - redis-cache
    environment:
      - PORT=4001

  api-3:
    build:
      context: ./server
      dockerfile: Dockerfile
    image: wilddex-api
    restart: always
    ports:
      - "4002:4002"
    env_file:
      - "./server/.env"
    networks:
      - wilddex-network
    volumes:
      - ./server:/app
      - /app/node_modules
    depends_on:
      - db-primary
      - redis-cache
    environment:
      - PORT=4002

  prediction-api:
    build:
      context: ./model
      dockerfile: Dockerfile
    image: wilddex-prediction-api
    restart: always
    ports:
      - "8080:8080"
    networks:
      - wilddex-network

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    image: wilddex-client
    restart: always
    ports:
      - "5173:80"
    env_file:
      - "./client/.env"
    volumes:
      - ./client:/app
      - /app/node_modules
    networks:
      - wilddex-network
    depends_on:
      - main_proxy
      - backup_proxy

  main_proxy:
    image: nginx:stable-alpine
    restart: always
    volumes:
      - ./client/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - wilddex-network
    depends_on:
      - api-1
      - api-2
      - api-3
    ports:
      - "3000:80"

  backup_proxy:
    image: nginx:stable-alpine
    restart: always
    volumes:
      - ./client/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - wilddex-network
    depends_on:
      - api-1
      - api-2
      - api-3
    ports:
      - "3001:80"

volumes:
  pgdata-primary:
  pgdata-replica:
  redis-cache:


networks:
  wilddex-network:
    driver: bridge
